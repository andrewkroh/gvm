name: Draft Release

on:
  push:
    tags:
      - 'v*'

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: set release version
        id: release_version
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.17

      - name: install gox
        env:
          GO111MODULE: off
        run: go get github.com/mitchellh/gox

      - name: cross build
        shell: bash
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          mkdir -p build/bin
          gox -ldflags '-X main.version=${{ steps.release_version.outputs.tag }}' \
              -output='build/bin/{{.Dir}}-{{.OS}}-{{.Arch}}' \
              -os='windows linux darwin freebsd' \
              -arch='amd64 386 arm arm64' \
              -osarch='!darwin/386 !darwin/arm' ./cmd/gvm

      - name: create draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true

      - name: upload artifacts
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const release_id = '${{ steps.create_release.outputs.id }}';
            for (let file of await fs.readdir('build/bin')) {
              console.log('Uploading', file);

              await github.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release_id,
                name: file,
                data: await fs.readFile(`build/bin/${file}`)
              });
            }
